= state_pattern

A Ruby state pattern implementation.
The idea comes from this nice Jay Field's post http://blog.jayfields.com/2007/08/ruby-state-pattern-using-modules-and.html

  require 'rubygems'
  require 'state_pattern'

  module On
    protected
  
    def press
      transition_to(Off)
      "#{button_name} is off"
    end
  end
  
  module Off
    protected
  
    def press
      transition_to(On)
      "#{button_name} is on"
    end
  end
  
  class Button
    include StatePattern
    add_states On, Off
    set_initial_state Off
    valid_transitions [On, :press] => Off, [Off, :press] => On

    #this method can be removed as it will be mapped automatically anyways
    #but is good to leave the option to do the delegation yourself in case you want to do more things
    def press
      delegate_to_event(:press)
    end
  
    def button_name
      "Light button"
    end
  end

  button = Button.new
  puts button.press # => "Light button is on"
  puts button.press # => "Light button is off"
  puts button.press # => "Light button is on"

== Requirements

facets

== Copyright

Copyright (c) 2009 Daniel Cadenas. See LICENSE for details.
